// Create a LoggedIn role
// Server Key = fnAE-LCEXgAAUz3dNZbGmi8FpZWmGP4s74DESTsT

// fnAE-MkyXOAAU5kTLEsPuivDcOYjsrRdv_8AIzmW


// Create user collection
Collection.create({ name: "User"})


// Create a Role
let loggedInRole = Role.create({
  name: "logged_in",
  membership: {
    resource: "User"
  },
  privileges: [
    {
     resource: "User",
      actions: {
        write: "(oldData, newData) => { 
          Query.identity() == oldData.owner && oldData.owner == 
          newData.owner 
        }"
      }
    }
  ]
})

loggedInRole

// Create a public role

let publicRole = Role.create({
  name: "public4",
  privileges: [
    {
      resource: "User",
      actions: {
        read: true,
        create: true,
      }
    },
    {
      resource: "Credentials",
      actions: {
        read: true,
        create: true,
        write: true,
        delete: true
      }
    },
    {
      resource: "LoginUser",
      actions: {
        call: true
      }
    }
  ]
})

// Create a secret for the role
Key.create({ role: "public2" })

// Create a new user with the public role
User.create({
  name: "shadid",
  email: "shadid12@email.com"
})

// Register with a user credentials
Credentials.create({
  document: User.byId("358214887058440259"),
  password: "password"
})

// Login with a user credentials
let person = User.byId("358219817589669921")
Credentials.byDocument(person).login("password")

// Role Stuff 
Role.byName("public3").privileges



// Create a new function 

Function.create({
  name: "AddTwo",
  body: "x => x + 2"
})

Function.create({
  name: "LoginUser",
  body: "x => x + 2"
})


Function.create({
  name: "Signup",
  role: "server",
  body: "(username, email, password) => {
    let user = User.create({ name: username, email: email })
    Credentials.create({ document: user, password: password })
    user
  }"
})


Function.byName("Signup").update({ 
  role: "server",
  body: "(username, email, password) => {
    let user = User.create({ name: username, email: email })
    Credentials.create({ document: user, password: password })
    user
  }"
})


Function.byName("Login").update({ 
  role: "server",
  body: "(email, password) => {
    let user = User.byEmail(email).first()
    Credentials.byDocument(user).login(password)
  }" 
})


Shop.definition.update({
  indexes: {
    byShopOwner: {
      terms: [{ "field": "owner" }]
    }
  }
})



LoginUser("341071393701494817", "sekrit")



Role.byName("public5").update({ 
  privileges: [
    {
      resource: "User",
      actions: {
        read: true,
        create: true,
      }
    },
    {
      resource: "Credentials",
      actions: {
        read: true,
        create: true,
        write: true,
        delete: true
      }
    },
    {
      resource: "LoginUser",
      actions: {
        call: true
      }
    }
  ]
})


// Create Product Collection
Collection.create({ name: "Product" })
// Create Shop Collection
Collection.create({ name: "Shop" })



Role.create({
  name: "UnAuthenticatedRole",
  privileges: [
    {
      resource: "User",
      actions: {
        read: true
      }
    },
    {
      resource: "Product",
      actions: {
        read: true
      }
    },
    {
      resource: "Shop",
      actions: {
        read: true
      }
    }
  ]
})

  Role.byName("UnAuthenticatedRole").update({
    privileges: [
      {
        resource: "User",
        actions: {
          read: true
        }
      },
      {
        resource: "Product",
        actions: {
          read: true
        }
      },
      {
        resource: "Shop",
        actions: {
          read: true
        }
      },
      {
        resource: "Signup",
        actions: {
          call: true
        }
      },
      {
        resource: "Login",
        actions: {
          call: true
        }
      }
    ]
  })

Key.create({ role: "UnAuthRole" })


User.definition.update({
  indexes: {
    byEmail: {
      terms: [{ field: "email" }]
    }
  }
})


Function.create({
  name: "Login",
  role: "server",
  body: "(email, password) => {
    let user = User.byEmail(id).first()
    Credentials.byDocument(user).login(password)
  }" 
})